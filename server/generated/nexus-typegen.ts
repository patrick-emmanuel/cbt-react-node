/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as ctx from "../src/types"
import * as photon from "@generated/photon"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AssessmentCreateInput: { // input type
    author?: NexusGenInputs['UserCreateOneWithoutAuthorInput'] | null; // UserCreateOneWithoutAuthorInput
    createdAt?: any | null; // DateTime
    description?: string | null; // String
    id?: string | null; // ID
    published: boolean; // Boolean!
    questions?: NexusGenInputs['QuestionCreateManyWithoutQuestionsInput'] | null; // QuestionCreateManyWithoutQuestionsInput
    title: string; // String!
    updatedAt?: any | null; // DateTime
  }
  AssessmentCreateManyWithoutAssessmentsInput: { // input type
    connect?: NexusGenInputs['AssessmentWhereUniqueInput'][] | null; // [AssessmentWhereUniqueInput!]
    create?: NexusGenInputs['AssessmentCreateWithoutAuthorInput'][] | null; // [AssessmentCreateWithoutAuthorInput!]
  }
  AssessmentCreateWithoutAuthorInput: { // input type
    createdAt?: any | null; // DateTime
    description?: string | null; // String
    id?: string | null; // ID
    published: boolean; // Boolean!
    questions?: NexusGenInputs['QuestionCreateManyWithoutQuestionsInput'] | null; // QuestionCreateManyWithoutQuestionsInput
    title: string; // String!
    updatedAt?: any | null; // DateTime
  }
  AssessmentWhereUniqueInput: { // input type
    id?: string | null; // ID
  }
  QuestionCreateManyWithoutQuestionsInput: { // input type
    connect?: NexusGenInputs['QuestionWhereUniqueInput'][] | null; // [QuestionWhereUniqueInput!]
    create?: NexusGenInputs['QuestionCreateWithoutAssessmentInput'][] | null; // [QuestionCreateWithoutAssessmentInput!]
  }
  QuestionCreateWithoutAssessmentInput: { // input type
    content: string; // String!
    createdAt?: any | null; // DateTime
    id?: string | null; // ID
    options?: NexusGenInputs['QuestionOptionCreateManyWithoutOptionsInput'] | null; // QuestionOptionCreateManyWithoutOptionsInput
    updatedAt?: any | null; // DateTime
  }
  QuestionOptionCreateManyWithoutOptionsInput: { // input type
    connect?: NexusGenInputs['QuestionOptionWhereUniqueInput'][] | null; // [QuestionOptionWhereUniqueInput!]
    create?: NexusGenInputs['QuestionOptionCreateWithoutQuestionInput'][] | null; // [QuestionOptionCreateWithoutQuestionInput!]
  }
  QuestionOptionCreateWithoutQuestionInput: { // input type
    content: string; // String!
    correct: boolean; // Boolean!
    createdAt?: any | null; // DateTime
    id?: string | null; // ID
    updatedAt?: any | null; // DateTime
  }
  QuestionOptionWhereUniqueInput: { // input type
    id?: string | null; // ID
  }
  QuestionWhereUniqueInput: { // input type
    id?: string | null; // ID
  }
  UserCreateOneWithoutAuthorInput: { // input type
    connect?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
    create?: NexusGenInputs['UserCreateWithoutPostInput'] | null; // UserCreateWithoutPostInput
  }
  UserCreateWithoutPostInput: { // input type
    assessments?: NexusGenInputs['AssessmentCreateManyWithoutAssessmentsInput'] | null; // AssessmentCreateManyWithoutAssessmentsInput
    email: string; // String!
    id?: string | null; // ID
    name?: string | null; // String
    password: string; // String!
  }
  UserWhereUniqueInput: { // input type
    email?: string | null; // String
    id?: string | null; // ID
  }
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Assessment: photon.Assessment;
  AuthPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Mutation: {};
  Post: photon.Post;
  Query: {};
  User: photon.User;
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  AssessmentCreateInput: NexusGenInputs['AssessmentCreateInput'];
  AssessmentCreateManyWithoutAssessmentsInput: NexusGenInputs['AssessmentCreateManyWithoutAssessmentsInput'];
  AssessmentCreateWithoutAuthorInput: NexusGenInputs['AssessmentCreateWithoutAuthorInput'];
  AssessmentWhereUniqueInput: NexusGenInputs['AssessmentWhereUniqueInput'];
  QuestionCreateManyWithoutQuestionsInput: NexusGenInputs['QuestionCreateManyWithoutQuestionsInput'];
  QuestionCreateWithoutAssessmentInput: NexusGenInputs['QuestionCreateWithoutAssessmentInput'];
  QuestionOptionCreateManyWithoutOptionsInput: NexusGenInputs['QuestionOptionCreateManyWithoutOptionsInput'];
  QuestionOptionCreateWithoutQuestionInput: NexusGenInputs['QuestionOptionCreateWithoutQuestionInput'];
  QuestionOptionWhereUniqueInput: NexusGenInputs['QuestionOptionWhereUniqueInput'];
  QuestionWhereUniqueInput: NexusGenInputs['QuestionWhereUniqueInput'];
  UserCreateOneWithoutAuthorInput: NexusGenInputs['UserCreateOneWithoutAuthorInput'];
  UserCreateWithoutPostInput: NexusGenInputs['UserCreateWithoutPostInput'];
  UserWhereUniqueInput: NexusGenInputs['UserWhereUniqueInput'];
}

export interface NexusGenFieldTypes {
  Assessment: { // field return type
    author: NexusGenRootTypes['User'] | null; // User
    createdAt: any; // DateTime!
    description: string | null; // String
    id: string; // ID!
    published: boolean; // Boolean!
    title: string; // String!
    updatedAt: any; // DateTime!
  }
  AuthPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Mutation: { // field return type
    createDraft: NexusGenRootTypes['Post']; // Post!
    createOneAssessment: NexusGenRootTypes['Assessment']; // Assessment!
    deletePost: NexusGenRootTypes['Post'] | null; // Post
    login: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    publish: NexusGenRootTypes['Post'] | null; // Post
    signup: NexusGenRootTypes['AuthPayload']; // AuthPayload!
  }
  Post: { // field return type
    author: NexusGenRootTypes['User'] | null; // User
    content: string | null; // String
    id: string; // ID!
    published: boolean; // Boolean!
    title: string; // String!
  }
  Query: { // field return type
    assessments: NexusGenRootTypes['Assessment'][] | null; // [Assessment!]
    feed: NexusGenRootTypes['Post'][]; // [Post!]!
    filterPosts: NexusGenRootTypes['Post'][]; // [Post!]!
    me: NexusGenRootTypes['User']; // User!
    post: NexusGenRootTypes['Post'] | null; // Post
  }
  User: { // field return type
    email: string; // String!
    id: string; // ID!
    name: string | null; // String
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createDraft: { // args
      content?: string | null; // String
      title?: string | null; // String
    }
    createOneAssessment: { // args
      data: NexusGenInputs['AssessmentCreateInput']; // AssessmentCreateInput!
    }
    deletePost: { // args
      id?: string | null; // ID
    }
    login: { // args
      email?: string | null; // String
      password?: string | null; // String
    }
    publish: { // args
      id?: string | null; // ID
    }
    signup: { // args
      email?: string | null; // String
      name?: string | null; // String
      password?: string | null; // String
    }
  }
  Query: {
    assessments: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    }
    filterPosts: { // args
      searchString?: string | null; // String
    }
    post: { // args
      id?: string | null; // ID
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Assessment" | "AuthPayload" | "Mutation" | "Post" | "Query" | "User";

export type NexusGenInputNames = "AssessmentCreateInput" | "AssessmentCreateManyWithoutAssessmentsInput" | "AssessmentCreateWithoutAuthorInput" | "AssessmentWhereUniqueInput" | "QuestionCreateManyWithoutQuestionsInput" | "QuestionCreateWithoutAssessmentInput" | "QuestionOptionCreateManyWithoutOptionsInput" | "QuestionOptionCreateWithoutQuestionInput" | "QuestionOptionWhereUniqueInput" | "QuestionWhereUniqueInput" | "UserCreateOneWithoutAuthorInput" | "UserCreateWithoutPostInput" | "UserWhereUniqueInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: ctx.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}