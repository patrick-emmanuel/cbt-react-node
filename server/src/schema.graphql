### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

"""DateTime"""
scalar DateTime

type Mutation {
  createDraft(content: String, title: String): Post!
  createOneTest(data: TestCreateInput!): Test!
  deletePost(id: ID): Post
  login(email: String, password: String): AuthPayload!
  publish(id: ID): Post
  signup(email: String, name: String, password: String): AuthPayload!
}

type Post {
  author: User
  content: String
  id: ID!
  published: Boolean!
  title: String!
}

type Query {
  feed: [Post!]!
  filterPosts(searchString: String): [Post!]!
  me: User!
  post(id: ID): Post
}

input QuestionCreateManyWithoutQuestionsInput {
  connect: [QuestionWhereUniqueInput!]
  create: [QuestionCreateWithoutTestInput!]
}

input QuestionCreateWithoutTestInput {
  content: String!
  createdAt: DateTime
  id: ID
  options: QuestionOptionCreateManyWithoutOptionsInput
  updatedAt: DateTime
}

input QuestionOptionCreateManyWithoutOptionsInput {
  connect: [QuestionOptionWhereUniqueInput!]
  create: [QuestionOptionCreateWithoutQuestionInput!]
}

input QuestionOptionCreateWithoutQuestionInput {
  content: String!
  correct: Boolean!
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
}

input QuestionOptionWhereUniqueInput {
  id: ID
}

input QuestionWhereUniqueInput {
  id: ID
}

type Test {
  author: User
  content: String
  id: ID!
  published: Boolean!
  title: String!
}

input TestCreateInput {
  author: UserCreateOneWithoutAuthorInput
  content: String
  createdAt: DateTime
  id: ID
  published: Boolean!
  questions: QuestionCreateManyWithoutQuestionsInput
  title: String!
  updatedAt: DateTime
}

input TestCreateManyWithoutTestsInput {
  connect: [TestWhereUniqueInput!]
  create: [TestCreateWithoutAuthorInput!]
}

input TestCreateWithoutAuthorInput {
  content: String
  createdAt: DateTime
  id: ID
  published: Boolean!
  questions: QuestionCreateManyWithoutQuestionsInput
  title: String!
  updatedAt: DateTime
}

input TestWhereUniqueInput {
  id: ID
}

type User {
  email: String!
  id: ID!
  name: String
  posts(after: String, before: String, first: Int, last: Int, skip: Int): [Post!]
}

input UserCreateOneWithoutAuthorInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
}

input UserCreateWithoutPostsInput {
  email: String!
  id: ID
  name: String
  password: String!
  tests: TestCreateManyWithoutTestsInput
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
