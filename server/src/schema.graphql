### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Assessment {
  author: User!
  createdAt: DateTime!
  description: String!
  id: ID!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
}

input AssessmentCreateInput {
  author: UserCreateOneWithoutAuthorInput!
  createdAt: DateTime
  description: String!
  id: ID
  published: Boolean!
  questions: QuestionCreateManyWithoutQuestionsInput
  title: String!
  updatedAt: DateTime
}

input AssessmentCreateManyWithoutAssessmentsInput {
  connect: [AssessmentWhereUniqueInput!]
  create: [AssessmentCreateWithoutAuthorInput!]
}

input AssessmentCreateWithoutAuthorInput {
  createdAt: DateTime
  description: String!
  id: ID
  published: Boolean!
  questions: QuestionCreateManyWithoutQuestionsInput
  title: String!
  updatedAt: DateTime
}

input AssessmentWhereUniqueInput {
  id: ID
}

type AuthPayload {
  token: String!
  user: User!
}

"""DateTime"""
scalar DateTime

type Mutation {
  createDraft(content: String, title: String): Post!
  createOneAssessment(data: AssessmentCreateInput!): Assessment!
  deleteOneAssessment(where: AssessmentWhereUniqueInput!): Assessment
  deletePost(id: ID): Post
  login(email: String, password: String): AuthPayload!
  publish(id: ID): Post
  signup(email: String, name: String, password: String): AuthPayload!
}

type Post {
  author: User
  content: String
  createdAt: DateTime!
  id: ID!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
}

type Query {
  assessment(where: AssessmentWhereUniqueInput!): Assessment
  assessments(after: String, before: String, first: Int, last: Int, skip: Int): [Assessment!]
  feed: [Post!]!
  filterPosts(searchString: String): [Post!]!
  me: User!
  post(id: ID): Post
}

input QuestionCreateManyWithoutQuestionsInput {
  connect: [QuestionWhereUniqueInput!]
  create: [QuestionCreateWithoutAssessmentInput!]
}

input QuestionCreateWithoutAssessmentInput {
  content: String!
  createdAt: DateTime
  id: ID
  options: QuestionOptionCreateManyWithoutOptionsInput
  questionType: QuestionType
  updatedAt: DateTime
}

type QuestionOption {
  content: String!
  correct: Boolean!
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

input QuestionOptionCreateManyWithoutOptionsInput {
  connect: [QuestionOptionWhereUniqueInput!]
  create: [QuestionOptionCreateWithoutQuestionInput!]
}

input QuestionOptionCreateWithoutQuestionInput {
  content: String!
  correct: Boolean!
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
}

input QuestionOptionWhereUniqueInput {
  id: ID
}

enum QuestionType {
  SELECT
  TEXT
}

input QuestionWhereUniqueInput {
  id: ID
}

type User {
  email: String!
  id: ID!
  name: String
}

input UserCreateOneWithoutAuthorInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostInput
}

input UserCreateWithoutPostInput {
  assessments: AssessmentCreateManyWithoutAssessmentsInput
  email: String!
  id: ID
  name: String
  password: String!
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
